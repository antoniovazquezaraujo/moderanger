// AUTOGENERATED FILE
// This file was generated from song.grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ModeRangerActionDict<T> extends BaseActionDict<T> {
  SONG?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  PARTS?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  PART?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  BLOCKS?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  BLOCK?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: NonterminalNode) => T;
  REPEAT?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  COMMANDS?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  COMMAND?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PLAYMODE_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  WIDTH_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  OCTAVE_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  SCALE_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  INVERSION_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  KEY_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  GAP_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  SHIFTSTART_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  SHIFTSIZE_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  SHIFTVALUE_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  PATTERN_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode) => T;
  PATTERN_GAP_COMMAND_VALUE?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  NOTES?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  NOTES_CONTENT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  NOTE?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode) => T;
  SIMPLE_NOTE?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  NOTE_GROUP?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  DURATION?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  DURATION_VALUE?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  NOTE_VALUE?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode) => T;
  BEGIN_OBJECT?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  END_OBJECT?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  GROUP_START?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  GROUP_END?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  VALUE_SEPARATOR?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  KEY_VALUE_SEPARATOR?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode) => T;
  SILENCE_SIGN?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  _?: (this: NonterminalNode, arg0: IterationNode) => T;
}

export interface ModeRangerSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ModeRangerActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ModeRangerActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ModeRangerActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ModeRangerActionDict<T>): this;
}

export interface ModeRangerGrammar extends Grammar {
  createSemantics(): ModeRangerSemantics;
  extendSemantics(superSemantics: ModeRangerSemantics): ModeRangerSemantics;
}

declare const grammar: ModeRangerGrammar;
export default grammar;

