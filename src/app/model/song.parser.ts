/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* BEGIN_OBJECT := _ '{' _
* END_OBJECT := _ '}' _
* GROUP_START:= _ '\(' _
* GROUP_END:= _ '\)' _
* VALUE_SEPARATOR := _ ',' _
* NAME_SEPARATOR := _ ':' _
* INT := '0|[1-9][0-9]*'
* SILENCE_SIGN:= 's'
* _ := '\s*'
* SONG:=
*   BEGIN_OBJECT
*     parts = PART {VALUE_SEPARATOR PART}*
*   END_OBJECT
* PART:=
*     blocks= BLOCK {VALUE_SEPARATOR BLOCK}*
* BLOCK:=
*   BEGIN_OBJECT
*     head = BLOCK_CONTENT
*     tail = {BLOCK}*
*   END_OBJECT
* BLOCK_CONTENT:=
*   BEGIN_OBJECT
*     repeat= {REPEAT}*
*     noteGroup= NOTES
*     commands= {COMMANDS}*
*     blocks={BLOCK}*
*   END_OBJECT
* REPEAT:=
*   'repeat' NAME_SEPARATOR INT
* COMMANDS:=
*   COMMAND VALUE_SEPARATOR {COMMAND}*
* COMMAND:=
*       key='playmode'    NAME_SEPARATOR value= PLAYMODE_COMMAND_VALUE
*     | key='width'       NAME_SEPARATOR value= WIDTH_COMMAND_VALUE
*     | key='octave'      NAME_SEPARATOR value= OCTAVE_COMMAND_VALUE
*     | key='scale'       NAME_SEPARATOR value= SCALE_COMMAND_VALUE
*     | key='inversion'   NAME_SEPARATOR value= INVERSION_COMMAND_VALUE
*     | key='key'         NAME_SEPARATOR value= KEY_COMMAND_VALUE
*     | key='gap'         NAME_SEPARATOR value= GAP_COMMAND_VALUE
*     | key='shiftstart'  NAME_SEPARATOR value= SHIFTSTART_COMMAND_VALUE
*     | key='shiftsize'   NAME_SEPARATOR value= SHIFTSIZE_COMMAND_VALUE
*     | key='shiftvalue'  NAME_SEPARATOR value= SHIFTVALUE_COMMAND_VALUE
*     | key='pattern'     NAME_SEPARATOR value= PATTERN_COMMAND_VALUE
*     | key='pattern_gap' NAME_SEPARATOR value= PATTERN_GAP_COMMAND_VALUE
* PLAYMODE_COMMAND_VALUE:=
*       'chord'
*     | 'ascending'
*     | 'descending'
*     | 'asc_desc'
*     | 'desc_asc'
*     | 'even_asc_odd_asc'
*     | 'even_asc_odd_desc'
*     | 'even_desc_odd_desc'
*     | 'even_desc_odd_asc'
*     | 'odd_asc_even_asc'
*     | 'odd_asc_even_desc'
*     | 'odd_desc_even_desc'
*     | 'odd_desc_even_asc'
*     | 'random'
* WIDTH_COMMAND_VALUE:=
*   key= 'width'  NAME_SEPARATOR value=INT
* OCTAVE_COMMAND_VALUE:=
*   key ='octave'  NAME_SEPARATOR value = INT
* SCALE_COMMAND_VALUE:=
*   key= 'scale'  
*   NAME_SEPARATOR
*   value= 'white'|'blue'|'red'|'black'|'penta'|'tones'|'full'
* INVERSION_COMMAND_VALUE:=
*   key= 'inversion'  NAME_SEPARATOR value= INT
* KEY_COMMAND_VALUE:=
*   key= 'key'  NAME_SEPARATOR value=INT
* GAP_COMMAND_VALUE:=
*   key='gap'  NAME_SEPARATOR value=INT
* SHIFTSTART_COMMAND_VALUE:=
*   key='shiftstart'  NAME_SEPARATOR value=INT
* SHIFTSIZE_COMMAND_VALUE:=
*   key= 'shiftsize'  NAME_SEPARATOR value= INT
* SHIFTVALUE_COMMAND_VALUE:=
*   key= 'shiftvalue'  NAME_SEPARATOR value= INT
* PATTERN_COMMAND_VALUE:=
*   key= 'pattern'  NAME_SEPARATOR value = INT {INT}*
* PATTERN_GAP_COMMAND_VALUE:=
*   key= 'patterngap'  NAME_SEPARATOR value= INT
* NOTES:=
*     head = NOTES_CONTENT
*     tail = {_ content = NOTES}*
* NOTES_CONTENT:= noteGroup= {NOTE_GROUP} |  note={NOTE}
* NOTE:= duration = {DURATION}? _ simpleNote= SIMPLE_NOTE
* SIMPLE_NOTE:= silence={SILENCE_SIGN} | note={NOTE_VALUE}
* NOTE_GROUP:= duration= DURATION _ GROUP_START _ notes=NOTES _ GROUP_END
* DURATION:= value = {DURATION_VALUE} NAME_SEPARATOR
* DURATION_VALUE:= '[0-9]+n\.?' | '[0-9]+m' | '[0-9]+t'
* NOTE_VALUE:= '-?[0-9]+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    BEGIN_OBJECT = "BEGIN_OBJECT",
    END_OBJECT = "END_OBJECT",
    GROUP_START = "GROUP_START",
    GROUP_END = "GROUP_END",
    VALUE_SEPARATOR = "VALUE_SEPARATOR",
    NAME_SEPARATOR = "NAME_SEPARATOR",
    INT = "INT",
    SILENCE_SIGN = "SILENCE_SIGN",
    _ = "_",
    SONG = "SONG",
    SONG_$0 = "SONG_$0",
    PART = "PART",
    PART_$0 = "PART_$0",
    BLOCK = "BLOCK",
    BLOCK_$0 = "BLOCK_$0",
    BLOCK_CONTENT = "BLOCK_CONTENT",
    BLOCK_CONTENT_$0 = "BLOCK_CONTENT_$0",
    BLOCK_CONTENT_$1 = "BLOCK_CONTENT_$1",
    BLOCK_CONTENT_$2 = "BLOCK_CONTENT_$2",
    REPEAT = "REPEAT",
    COMMANDS = "COMMANDS",
    COMMANDS_$0 = "COMMANDS_$0",
    COMMAND_1 = "COMMAND_1",
    COMMAND_2 = "COMMAND_2",
    COMMAND_3 = "COMMAND_3",
    COMMAND_4 = "COMMAND_4",
    COMMAND_5 = "COMMAND_5",
    COMMAND_6 = "COMMAND_6",
    COMMAND_7 = "COMMAND_7",
    COMMAND_8 = "COMMAND_8",
    COMMAND_9 = "COMMAND_9",
    COMMAND_10 = "COMMAND_10",
    COMMAND_11 = "COMMAND_11",
    COMMAND_12 = "COMMAND_12",
    PLAYMODE_COMMAND_VALUE_1 = "PLAYMODE_COMMAND_VALUE_1",
    PLAYMODE_COMMAND_VALUE_2 = "PLAYMODE_COMMAND_VALUE_2",
    PLAYMODE_COMMAND_VALUE_3 = "PLAYMODE_COMMAND_VALUE_3",
    PLAYMODE_COMMAND_VALUE_4 = "PLAYMODE_COMMAND_VALUE_4",
    PLAYMODE_COMMAND_VALUE_5 = "PLAYMODE_COMMAND_VALUE_5",
    PLAYMODE_COMMAND_VALUE_6 = "PLAYMODE_COMMAND_VALUE_6",
    PLAYMODE_COMMAND_VALUE_7 = "PLAYMODE_COMMAND_VALUE_7",
    PLAYMODE_COMMAND_VALUE_8 = "PLAYMODE_COMMAND_VALUE_8",
    PLAYMODE_COMMAND_VALUE_9 = "PLAYMODE_COMMAND_VALUE_9",
    PLAYMODE_COMMAND_VALUE_10 = "PLAYMODE_COMMAND_VALUE_10",
    PLAYMODE_COMMAND_VALUE_11 = "PLAYMODE_COMMAND_VALUE_11",
    PLAYMODE_COMMAND_VALUE_12 = "PLAYMODE_COMMAND_VALUE_12",
    PLAYMODE_COMMAND_VALUE_13 = "PLAYMODE_COMMAND_VALUE_13",
    PLAYMODE_COMMAND_VALUE_14 = "PLAYMODE_COMMAND_VALUE_14",
    WIDTH_COMMAND_VALUE = "WIDTH_COMMAND_VALUE",
    OCTAVE_COMMAND_VALUE = "OCTAVE_COMMAND_VALUE",
    SCALE_COMMAND_VALUE_1 = "SCALE_COMMAND_VALUE_1",
    SCALE_COMMAND_VALUE_2 = "SCALE_COMMAND_VALUE_2",
    SCALE_COMMAND_VALUE_3 = "SCALE_COMMAND_VALUE_3",
    SCALE_COMMAND_VALUE_4 = "SCALE_COMMAND_VALUE_4",
    SCALE_COMMAND_VALUE_5 = "SCALE_COMMAND_VALUE_5",
    SCALE_COMMAND_VALUE_6 = "SCALE_COMMAND_VALUE_6",
    SCALE_COMMAND_VALUE_7 = "SCALE_COMMAND_VALUE_7",
    INVERSION_COMMAND_VALUE = "INVERSION_COMMAND_VALUE",
    KEY_COMMAND_VALUE = "KEY_COMMAND_VALUE",
    GAP_COMMAND_VALUE = "GAP_COMMAND_VALUE",
    SHIFTSTART_COMMAND_VALUE = "SHIFTSTART_COMMAND_VALUE",
    SHIFTSIZE_COMMAND_VALUE = "SHIFTSIZE_COMMAND_VALUE",
    SHIFTVALUE_COMMAND_VALUE = "SHIFTVALUE_COMMAND_VALUE",
    PATTERN_COMMAND_VALUE = "PATTERN_COMMAND_VALUE",
    PATTERN_COMMAND_VALUE_$0 = "PATTERN_COMMAND_VALUE_$0",
    PATTERN_GAP_COMMAND_VALUE = "PATTERN_GAP_COMMAND_VALUE",
    NOTES = "NOTES",
    NOTES_$0 = "NOTES_$0",
    NOTES_CONTENT_1 = "NOTES_CONTENT_1",
    NOTES_CONTENT_2 = "NOTES_CONTENT_2",
    NOTES_CONTENT_$0 = "NOTES_CONTENT_$0",
    NOTES_CONTENT_$1 = "NOTES_CONTENT_$1",
    NOTE = "NOTE",
    NOTE_$0 = "NOTE_$0",
    SIMPLE_NOTE_1 = "SIMPLE_NOTE_1",
    SIMPLE_NOTE_2 = "SIMPLE_NOTE_2",
    SIMPLE_NOTE_$0 = "SIMPLE_NOTE_$0",
    SIMPLE_NOTE_$1 = "SIMPLE_NOTE_$1",
    NOTE_GROUP = "NOTE_GROUP",
    DURATION = "DURATION",
    DURATION_$0 = "DURATION_$0",
    DURATION_VALUE_1 = "DURATION_VALUE_1",
    DURATION_VALUE_2 = "DURATION_VALUE_2",
    DURATION_VALUE_3 = "DURATION_VALUE_3",
    NOTE_VALUE = "NOTE_VALUE",
}
export interface BEGIN_OBJECT {
    kind: ASTKinds.BEGIN_OBJECT;
}
export interface END_OBJECT {
    kind: ASTKinds.END_OBJECT;
}
export interface GROUP_START {
    kind: ASTKinds.GROUP_START;
}
export interface GROUP_END {
    kind: ASTKinds.GROUP_END;
}
export interface VALUE_SEPARATOR {
    kind: ASTKinds.VALUE_SEPARATOR;
}
export interface NAME_SEPARATOR {
    kind: ASTKinds.NAME_SEPARATOR;
}
export type INT = string;
export type SILENCE_SIGN = string;
export type _ = string;
export interface SONG {
    kind: ASTKinds.SONG;
    parts: PART;
}
export interface SONG_$0 {
    kind: ASTKinds.SONG_$0;
}
export interface PART {
    kind: ASTKinds.PART;
    blocks: BLOCK;
}
export interface PART_$0 {
    kind: ASTKinds.PART_$0;
}
export interface BLOCK {
    kind: ASTKinds.BLOCK;
    head: BLOCK_CONTENT;
    tail: BLOCK_$0[];
}
export type BLOCK_$0 = BLOCK;
export interface BLOCK_CONTENT {
    kind: ASTKinds.BLOCK_CONTENT;
    repeat: BLOCK_CONTENT_$0[];
    noteGroup: NOTES;
    commands: BLOCK_CONTENT_$1[];
    blocks: BLOCK_CONTENT_$2[];
}
export type BLOCK_CONTENT_$0 = REPEAT;
export type BLOCK_CONTENT_$1 = COMMANDS;
export type BLOCK_CONTENT_$2 = BLOCK;
export interface REPEAT {
    kind: ASTKinds.REPEAT;
}
export interface COMMANDS {
    kind: ASTKinds.COMMANDS;
}
export type COMMANDS_$0 = COMMAND;
export type COMMAND = COMMAND_1 | COMMAND_2 | COMMAND_3 | COMMAND_4 | COMMAND_5 | COMMAND_6 | COMMAND_7 | COMMAND_8 | COMMAND_9 | COMMAND_10 | COMMAND_11 | COMMAND_12;
export interface COMMAND_1 {
    kind: ASTKinds.COMMAND_1;
    key: string;
    value: PLAYMODE_COMMAND_VALUE;
}
export interface COMMAND_2 {
    kind: ASTKinds.COMMAND_2;
    key: string;
    value: WIDTH_COMMAND_VALUE;
}
export interface COMMAND_3 {
    kind: ASTKinds.COMMAND_3;
    key: string;
    value: OCTAVE_COMMAND_VALUE;
}
export interface COMMAND_4 {
    kind: ASTKinds.COMMAND_4;
    key: string;
    value: SCALE_COMMAND_VALUE;
}
export interface COMMAND_5 {
    kind: ASTKinds.COMMAND_5;
    key: string;
    value: INVERSION_COMMAND_VALUE;
}
export interface COMMAND_6 {
    kind: ASTKinds.COMMAND_6;
    key: string;
    value: KEY_COMMAND_VALUE;
}
export interface COMMAND_7 {
    kind: ASTKinds.COMMAND_7;
    key: string;
    value: GAP_COMMAND_VALUE;
}
export interface COMMAND_8 {
    kind: ASTKinds.COMMAND_8;
    key: string;
    value: SHIFTSTART_COMMAND_VALUE;
}
export interface COMMAND_9 {
    kind: ASTKinds.COMMAND_9;
    key: string;
    value: SHIFTSIZE_COMMAND_VALUE;
}
export interface COMMAND_10 {
    kind: ASTKinds.COMMAND_10;
    key: string;
    value: SHIFTVALUE_COMMAND_VALUE;
}
export interface COMMAND_11 {
    kind: ASTKinds.COMMAND_11;
    key: string;
    value: PATTERN_COMMAND_VALUE;
}
export interface COMMAND_12 {
    kind: ASTKinds.COMMAND_12;
    key: string;
    value: PATTERN_GAP_COMMAND_VALUE;
}
export type PLAYMODE_COMMAND_VALUE = PLAYMODE_COMMAND_VALUE_1 | PLAYMODE_COMMAND_VALUE_2 | PLAYMODE_COMMAND_VALUE_3 | PLAYMODE_COMMAND_VALUE_4 | PLAYMODE_COMMAND_VALUE_5 | PLAYMODE_COMMAND_VALUE_6 | PLAYMODE_COMMAND_VALUE_7 | PLAYMODE_COMMAND_VALUE_8 | PLAYMODE_COMMAND_VALUE_9 | PLAYMODE_COMMAND_VALUE_10 | PLAYMODE_COMMAND_VALUE_11 | PLAYMODE_COMMAND_VALUE_12 | PLAYMODE_COMMAND_VALUE_13 | PLAYMODE_COMMAND_VALUE_14;
export type PLAYMODE_COMMAND_VALUE_1 = string;
export type PLAYMODE_COMMAND_VALUE_2 = string;
export type PLAYMODE_COMMAND_VALUE_3 = string;
export type PLAYMODE_COMMAND_VALUE_4 = string;
export type PLAYMODE_COMMAND_VALUE_5 = string;
export type PLAYMODE_COMMAND_VALUE_6 = string;
export type PLAYMODE_COMMAND_VALUE_7 = string;
export type PLAYMODE_COMMAND_VALUE_8 = string;
export type PLAYMODE_COMMAND_VALUE_9 = string;
export type PLAYMODE_COMMAND_VALUE_10 = string;
export type PLAYMODE_COMMAND_VALUE_11 = string;
export type PLAYMODE_COMMAND_VALUE_12 = string;
export type PLAYMODE_COMMAND_VALUE_13 = string;
export type PLAYMODE_COMMAND_VALUE_14 = string;
export interface WIDTH_COMMAND_VALUE {
    kind: ASTKinds.WIDTH_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface OCTAVE_COMMAND_VALUE {
    kind: ASTKinds.OCTAVE_COMMAND_VALUE;
    key: string;
    value: INT;
}
export type SCALE_COMMAND_VALUE = SCALE_COMMAND_VALUE_1 | SCALE_COMMAND_VALUE_2 | SCALE_COMMAND_VALUE_3 | SCALE_COMMAND_VALUE_4 | SCALE_COMMAND_VALUE_5 | SCALE_COMMAND_VALUE_6 | SCALE_COMMAND_VALUE_7;
export interface SCALE_COMMAND_VALUE_1 {
    kind: ASTKinds.SCALE_COMMAND_VALUE_1;
    key: string;
    value: string;
}
export type SCALE_COMMAND_VALUE_2 = string;
export type SCALE_COMMAND_VALUE_3 = string;
export type SCALE_COMMAND_VALUE_4 = string;
export type SCALE_COMMAND_VALUE_5 = string;
export type SCALE_COMMAND_VALUE_6 = string;
export type SCALE_COMMAND_VALUE_7 = string;
export interface INVERSION_COMMAND_VALUE {
    kind: ASTKinds.INVERSION_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface KEY_COMMAND_VALUE {
    kind: ASTKinds.KEY_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface GAP_COMMAND_VALUE {
    kind: ASTKinds.GAP_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface SHIFTSTART_COMMAND_VALUE {
    kind: ASTKinds.SHIFTSTART_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface SHIFTSIZE_COMMAND_VALUE {
    kind: ASTKinds.SHIFTSIZE_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface SHIFTVALUE_COMMAND_VALUE {
    kind: ASTKinds.SHIFTVALUE_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface PATTERN_COMMAND_VALUE {
    kind: ASTKinds.PATTERN_COMMAND_VALUE;
    key: string;
    value: INT;
}
export type PATTERN_COMMAND_VALUE_$0 = INT;
export interface PATTERN_GAP_COMMAND_VALUE {
    kind: ASTKinds.PATTERN_GAP_COMMAND_VALUE;
    key: string;
    value: INT;
}
export interface NOTES {
    kind: ASTKinds.NOTES;
    head: NOTES_CONTENT;
    tail: NOTES_$0[];
}
export interface NOTES_$0 {
    kind: ASTKinds.NOTES_$0;
    content: NOTES;
}
export type NOTES_CONTENT = NOTES_CONTENT_1 | NOTES_CONTENT_2;
export interface NOTES_CONTENT_1 {
    kind: ASTKinds.NOTES_CONTENT_1;
    noteGroup: NOTES_CONTENT_$0;
}
export interface NOTES_CONTENT_2 {
    kind: ASTKinds.NOTES_CONTENT_2;
    note: NOTES_CONTENT_$1;
}
export type NOTES_CONTENT_$0 = NOTE_GROUP;
export type NOTES_CONTENT_$1 = NOTE;
export interface NOTE {
    kind: ASTKinds.NOTE;
    duration: Nullable<NOTE_$0>;
    simpleNote: SIMPLE_NOTE;
}
export type NOTE_$0 = DURATION;
export type SIMPLE_NOTE = SIMPLE_NOTE_1 | SIMPLE_NOTE_2;
export interface SIMPLE_NOTE_1 {
    kind: ASTKinds.SIMPLE_NOTE_1;
    silence: SIMPLE_NOTE_$0;
}
export interface SIMPLE_NOTE_2 {
    kind: ASTKinds.SIMPLE_NOTE_2;
    note: SIMPLE_NOTE_$1;
}
export type SIMPLE_NOTE_$0 = SILENCE_SIGN;
export type SIMPLE_NOTE_$1 = NOTE_VALUE;
export interface NOTE_GROUP {
    kind: ASTKinds.NOTE_GROUP;
    duration: DURATION;
    notes: NOTES;
}
export interface DURATION {
    kind: ASTKinds.DURATION;
    value: DURATION_$0;
}
export type DURATION_$0 = DURATION_VALUE;
export type DURATION_VALUE = DURATION_VALUE_1 | DURATION_VALUE_2 | DURATION_VALUE_3;
export type DURATION_VALUE_1 = string;
export type DURATION_VALUE_2 = string;
export type DURATION_VALUE_3 = string;
export type NOTE_VALUE = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchBEGIN_OBJECT($$dpth: number, $$cr?: ErrorTracker): Nullable<BEGIN_OBJECT> {
        return this.run<BEGIN_OBJECT>($$dpth,
            () => {
                let $$res: Nullable<BEGIN_OBJECT> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BEGIN_OBJECT, };
                }
                return $$res;
            });
    }
    public matchEND_OBJECT($$dpth: number, $$cr?: ErrorTracker): Nullable<END_OBJECT> {
        return this.run<END_OBJECT>($$dpth,
            () => {
                let $$res: Nullable<END_OBJECT> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.END_OBJECT, };
                }
                return $$res;
            });
    }
    public matchGROUP_START($$dpth: number, $$cr?: ErrorTracker): Nullable<GROUP_START> {
        return this.run<GROUP_START>($$dpth,
            () => {
                let $$res: Nullable<GROUP_START> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.GROUP_START, };
                }
                return $$res;
            });
    }
    public matchGROUP_END($$dpth: number, $$cr?: ErrorTracker): Nullable<GROUP_END> {
        return this.run<GROUP_END>($$dpth,
            () => {
                let $$res: Nullable<GROUP_END> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.GROUP_END, };
                }
                return $$res;
            });
    }
    public matchVALUE_SEPARATOR($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_SEPARATOR> {
        return this.run<VALUE_SEPARATOR>($$dpth,
            () => {
                let $$res: Nullable<VALUE_SEPARATOR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.VALUE_SEPARATOR, };
                }
                return $$res;
            });
    }
    public matchNAME_SEPARATOR($$dpth: number, $$cr?: ErrorTracker): Nullable<NAME_SEPARATOR> {
        return this.run<NAME_SEPARATOR>($$dpth,
            () => {
                let $$res: Nullable<NAME_SEPARATOR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.NAME_SEPARATOR, };
                }
                return $$res;
            });
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.regexAccept(String.raw`(?:0|[1-9][0-9]*)`, "", $$dpth + 1, $$cr);
    }
    public matchSILENCE_SIGN($$dpth: number, $$cr?: ErrorTracker): Nullable<SILENCE_SIGN> {
        return this.regexAccept(String.raw`(?:s)`, "", $$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public matchSONG($$dpth: number, $$cr?: ErrorTracker): Nullable<SONG> {
        return this.run<SONG>($$dpth,
            () => {
                let $scope$parts: Nullable<PART>;
                let $$res: Nullable<SONG> = null;
                if (true
                    && this.matchBEGIN_OBJECT($$dpth + 1, $$cr) !== null
                    && ($scope$parts = this.matchPART($$dpth + 1, $$cr)) !== null
                    && this.loop<SONG_$0>(() => this.matchSONG_$0($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchEND_OBJECT($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SONG, parts: $scope$parts};
                }
                return $$res;
            });
    }
    public matchSONG_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SONG_$0> {
        return this.run<SONG_$0>($$dpth,
            () => {
                let $$res: Nullable<SONG_$0> = null;
                if (true
                    && this.matchVALUE_SEPARATOR($$dpth + 1, $$cr) !== null
                    && this.matchPART($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SONG_$0, };
                }
                return $$res;
            });
    }
    public matchPART($$dpth: number, $$cr?: ErrorTracker): Nullable<PART> {
        return this.run<PART>($$dpth,
            () => {
                let $scope$blocks: Nullable<BLOCK>;
                let $$res: Nullable<PART> = null;
                if (true
                    && ($scope$blocks = this.matchBLOCK($$dpth + 1, $$cr)) !== null
                    && this.loop<PART_$0>(() => this.matchPART_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.PART, blocks: $scope$blocks};
                }
                return $$res;
            });
    }
    public matchPART_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<PART_$0> {
        return this.run<PART_$0>($$dpth,
            () => {
                let $$res: Nullable<PART_$0> = null;
                if (true
                    && this.matchVALUE_SEPARATOR($$dpth + 1, $$cr) !== null
                    && this.matchBLOCK($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PART_$0, };
                }
                return $$res;
            });
    }
    public matchBLOCK($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK> {
        return this.run<BLOCK>($$dpth,
            () => {
                let $scope$head: Nullable<BLOCK_CONTENT>;
                let $scope$tail: Nullable<BLOCK_$0[]>;
                let $$res: Nullable<BLOCK> = null;
                if (true
                    && this.matchBEGIN_OBJECT($$dpth + 1, $$cr) !== null
                    && ($scope$head = this.matchBLOCK_CONTENT($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<BLOCK_$0>(() => this.matchBLOCK_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchEND_OBJECT($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BLOCK, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchBLOCK_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK_$0> {
        return this.matchBLOCK($$dpth + 1, $$cr);
    }
    public matchBLOCK_CONTENT($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK_CONTENT> {
        return this.run<BLOCK_CONTENT>($$dpth,
            () => {
                let $scope$repeat: Nullable<BLOCK_CONTENT_$0[]>;
                let $scope$noteGroup: Nullable<NOTES>;
                let $scope$commands: Nullable<BLOCK_CONTENT_$1[]>;
                let $scope$blocks: Nullable<BLOCK_CONTENT_$2[]>;
                let $$res: Nullable<BLOCK_CONTENT> = null;
                if (true
                    && this.matchBEGIN_OBJECT($$dpth + 1, $$cr) !== null
                    && ($scope$repeat = this.loop<BLOCK_CONTENT_$0>(() => this.matchBLOCK_CONTENT_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && ($scope$noteGroup = this.matchNOTES($$dpth + 1, $$cr)) !== null
                    && ($scope$commands = this.loop<BLOCK_CONTENT_$1>(() => this.matchBLOCK_CONTENT_$1($$dpth + 1, $$cr), 0, -1)) !== null
                    && ($scope$blocks = this.loop<BLOCK_CONTENT_$2>(() => this.matchBLOCK_CONTENT_$2($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchEND_OBJECT($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BLOCK_CONTENT, repeat: $scope$repeat, noteGroup: $scope$noteGroup, commands: $scope$commands, blocks: $scope$blocks};
                }
                return $$res;
            });
    }
    public matchBLOCK_CONTENT_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK_CONTENT_$0> {
        return this.matchREPEAT($$dpth + 1, $$cr);
    }
    public matchBLOCK_CONTENT_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK_CONTENT_$1> {
        return this.matchCOMMANDS($$dpth + 1, $$cr);
    }
    public matchBLOCK_CONTENT_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK_CONTENT_$2> {
        return this.matchBLOCK($$dpth + 1, $$cr);
    }
    public matchREPEAT($$dpth: number, $$cr?: ErrorTracker): Nullable<REPEAT> {
        return this.run<REPEAT>($$dpth,
            () => {
                let $$res: Nullable<REPEAT> = null;
                if (true
                    && this.regexAccept(String.raw`(?:repeat)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && this.matchINT($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.REPEAT, };
                }
                return $$res;
            });
    }
    public matchCOMMANDS($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMANDS> {
        return this.run<COMMANDS>($$dpth,
            () => {
                let $$res: Nullable<COMMANDS> = null;
                if (true
                    && this.matchCOMMAND($$dpth + 1, $$cr) !== null
                    && this.matchVALUE_SEPARATOR($$dpth + 1, $$cr) !== null
                    && this.loop<COMMANDS_$0>(() => this.matchCOMMANDS_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMANDS, };
                }
                return $$res;
            });
    }
    public matchCOMMANDS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMANDS_$0> {
        return this.matchCOMMAND($$dpth + 1, $$cr);
    }
    public matchCOMMAND($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND> {
        return this.choice<COMMAND>([
            () => this.matchCOMMAND_1($$dpth + 1, $$cr),
            () => this.matchCOMMAND_2($$dpth + 1, $$cr),
            () => this.matchCOMMAND_3($$dpth + 1, $$cr),
            () => this.matchCOMMAND_4($$dpth + 1, $$cr),
            () => this.matchCOMMAND_5($$dpth + 1, $$cr),
            () => this.matchCOMMAND_6($$dpth + 1, $$cr),
            () => this.matchCOMMAND_7($$dpth + 1, $$cr),
            () => this.matchCOMMAND_8($$dpth + 1, $$cr),
            () => this.matchCOMMAND_9($$dpth + 1, $$cr),
            () => this.matchCOMMAND_10($$dpth + 1, $$cr),
            () => this.matchCOMMAND_11($$dpth + 1, $$cr),
            () => this.matchCOMMAND_12($$dpth + 1, $$cr),
        ]);
    }
    public matchCOMMAND_1($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_1> {
        return this.run<COMMAND_1>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<PLAYMODE_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_1> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:playmode)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchPLAYMODE_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_1, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_2($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_2> {
        return this.run<COMMAND_2>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<WIDTH_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_2> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:width)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchWIDTH_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_2, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_3($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_3> {
        return this.run<COMMAND_3>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<OCTAVE_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_3> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:octave)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchOCTAVE_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_3, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_4($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_4> {
        return this.run<COMMAND_4>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<SCALE_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_4> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:scale)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchSCALE_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_4, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_5($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_5> {
        return this.run<COMMAND_5>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INVERSION_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_5> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:inversion)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINVERSION_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_5, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_6($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_6> {
        return this.run<COMMAND_6>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<KEY_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_6> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:key)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchKEY_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_6, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_7($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_7> {
        return this.run<COMMAND_7>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<GAP_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_7> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:gap)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchGAP_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_7, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_8($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_8> {
        return this.run<COMMAND_8>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<SHIFTSTART_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_8> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:shiftstart)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchSHIFTSTART_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_8, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_9($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_9> {
        return this.run<COMMAND_9>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<SHIFTSIZE_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_9> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:shiftsize)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchSHIFTSIZE_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_9, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_10($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_10> {
        return this.run<COMMAND_10>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<SHIFTVALUE_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_10> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:shiftvalue)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchSHIFTVALUE_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_10, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_11($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_11> {
        return this.run<COMMAND_11>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<PATTERN_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_11> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:pattern)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchPATTERN_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_11, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCOMMAND_12($$dpth: number, $$cr?: ErrorTracker): Nullable<COMMAND_12> {
        return this.run<COMMAND_12>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<PATTERN_GAP_COMMAND_VALUE>;
                let $$res: Nullable<COMMAND_12> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:pattern_gap)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchPATTERN_GAP_COMMAND_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COMMAND_12, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPLAYMODE_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE> {
        return this.choice<PLAYMODE_COMMAND_VALUE>([
            () => this.matchPLAYMODE_COMMAND_VALUE_1($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_2($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_3($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_4($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_5($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_6($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_7($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_8($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_9($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_10($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_11($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_12($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_13($$dpth + 1, $$cr),
            () => this.matchPLAYMODE_COMMAND_VALUE_14($$dpth + 1, $$cr),
        ]);
    }
    public matchPLAYMODE_COMMAND_VALUE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_1> {
        return this.regexAccept(String.raw`(?:chord)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_2> {
        return this.regexAccept(String.raw`(?:ascending)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_3> {
        return this.regexAccept(String.raw`(?:descending)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_4> {
        return this.regexAccept(String.raw`(?:asc_desc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_5> {
        return this.regexAccept(String.raw`(?:desc_asc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_6> {
        return this.regexAccept(String.raw`(?:even_asc_odd_asc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_7> {
        return this.regexAccept(String.raw`(?:even_asc_odd_desc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_8($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_8> {
        return this.regexAccept(String.raw`(?:even_desc_odd_desc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_9($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_9> {
        return this.regexAccept(String.raw`(?:even_desc_odd_asc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_10($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_10> {
        return this.regexAccept(String.raw`(?:odd_asc_even_asc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_11($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_11> {
        return this.regexAccept(String.raw`(?:odd_asc_even_desc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_12($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_12> {
        return this.regexAccept(String.raw`(?:odd_desc_even_desc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_13($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_13> {
        return this.regexAccept(String.raw`(?:odd_desc_even_asc)`, "", $$dpth + 1, $$cr);
    }
    public matchPLAYMODE_COMMAND_VALUE_14($$dpth: number, $$cr?: ErrorTracker): Nullable<PLAYMODE_COMMAND_VALUE_14> {
        return this.regexAccept(String.raw`(?:random)`, "", $$dpth + 1, $$cr);
    }
    public matchWIDTH_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<WIDTH_COMMAND_VALUE> {
        return this.run<WIDTH_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<WIDTH_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:width)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WIDTH_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchOCTAVE_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<OCTAVE_COMMAND_VALUE> {
        return this.run<OCTAVE_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<OCTAVE_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:octave)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.OCTAVE_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchSCALE_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE> {
        return this.choice<SCALE_COMMAND_VALUE>([
            () => this.matchSCALE_COMMAND_VALUE_1($$dpth + 1, $$cr),
            () => this.matchSCALE_COMMAND_VALUE_2($$dpth + 1, $$cr),
            () => this.matchSCALE_COMMAND_VALUE_3($$dpth + 1, $$cr),
            () => this.matchSCALE_COMMAND_VALUE_4($$dpth + 1, $$cr),
            () => this.matchSCALE_COMMAND_VALUE_5($$dpth + 1, $$cr),
            () => this.matchSCALE_COMMAND_VALUE_6($$dpth + 1, $$cr),
            () => this.matchSCALE_COMMAND_VALUE_7($$dpth + 1, $$cr),
        ]);
    }
    public matchSCALE_COMMAND_VALUE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_1> {
        return this.run<SCALE_COMMAND_VALUE_1>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<string>;
                let $$res: Nullable<SCALE_COMMAND_VALUE_1> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:scale)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:white)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SCALE_COMMAND_VALUE_1, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchSCALE_COMMAND_VALUE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_2> {
        return this.regexAccept(String.raw`(?:blue)`, "", $$dpth + 1, $$cr);
    }
    public matchSCALE_COMMAND_VALUE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_3> {
        return this.regexAccept(String.raw`(?:red)`, "", $$dpth + 1, $$cr);
    }
    public matchSCALE_COMMAND_VALUE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_4> {
        return this.regexAccept(String.raw`(?:black)`, "", $$dpth + 1, $$cr);
    }
    public matchSCALE_COMMAND_VALUE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_5> {
        return this.regexAccept(String.raw`(?:penta)`, "", $$dpth + 1, $$cr);
    }
    public matchSCALE_COMMAND_VALUE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_6> {
        return this.regexAccept(String.raw`(?:tones)`, "", $$dpth + 1, $$cr);
    }
    public matchSCALE_COMMAND_VALUE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<SCALE_COMMAND_VALUE_7> {
        return this.regexAccept(String.raw`(?:full)`, "", $$dpth + 1, $$cr);
    }
    public matchINVERSION_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<INVERSION_COMMAND_VALUE> {
        return this.run<INVERSION_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<INVERSION_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:inversion)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.INVERSION_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchKEY_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<KEY_COMMAND_VALUE> {
        return this.run<KEY_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<KEY_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:key)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.KEY_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchGAP_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<GAP_COMMAND_VALUE> {
        return this.run<GAP_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<GAP_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:gap)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.GAP_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchSHIFTSTART_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<SHIFTSTART_COMMAND_VALUE> {
        return this.run<SHIFTSTART_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<SHIFTSTART_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:shiftstart)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SHIFTSTART_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchSHIFTSIZE_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<SHIFTSIZE_COMMAND_VALUE> {
        return this.run<SHIFTSIZE_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<SHIFTSIZE_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:shiftsize)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SHIFTSIZE_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchSHIFTVALUE_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<SHIFTVALUE_COMMAND_VALUE> {
        return this.run<SHIFTVALUE_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<SHIFTVALUE_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:shiftvalue)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SHIFTVALUE_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPATTERN_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<PATTERN_COMMAND_VALUE> {
        return this.run<PATTERN_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<PATTERN_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:pattern)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                    && this.loop<PATTERN_COMMAND_VALUE_$0>(() => this.matchPATTERN_COMMAND_VALUE_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.PATTERN_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPATTERN_COMMAND_VALUE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<PATTERN_COMMAND_VALUE_$0> {
        return this.matchINT($$dpth + 1, $$cr);
    }
    public matchPATTERN_GAP_COMMAND_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<PATTERN_GAP_COMMAND_VALUE> {
        return this.run<PATTERN_GAP_COMMAND_VALUE>($$dpth,
            () => {
                let $scope$key: Nullable<string>;
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<PATTERN_GAP_COMMAND_VALUE> = null;
                if (true
                    && ($scope$key = this.regexAccept(String.raw`(?:patterngap)`, "", $$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.PATTERN_GAP_COMMAND_VALUE, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchNOTES($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES> {
        return this.run<NOTES>($$dpth,
            () => {
                let $scope$head: Nullable<NOTES_CONTENT>;
                let $scope$tail: Nullable<NOTES_$0[]>;
                let $$res: Nullable<NOTES> = null;
                if (true
                    && ($scope$head = this.matchNOTES_CONTENT($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<NOTES_$0>(() => this.matchNOTES_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = {kind: ASTKinds.NOTES, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchNOTES_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES_$0> {
        return this.run<NOTES_$0>($$dpth,
            () => {
                let $scope$content: Nullable<NOTES>;
                let $$res: Nullable<NOTES_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$content = this.matchNOTES($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NOTES_$0, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchNOTES_CONTENT($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES_CONTENT> {
        return this.choice<NOTES_CONTENT>([
            () => this.matchNOTES_CONTENT_1($$dpth + 1, $$cr),
            () => this.matchNOTES_CONTENT_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNOTES_CONTENT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES_CONTENT_1> {
        return this.run<NOTES_CONTENT_1>($$dpth,
            () => {
                let $scope$noteGroup: Nullable<NOTES_CONTENT_$0>;
                let $$res: Nullable<NOTES_CONTENT_1> = null;
                if (true
                    && ($scope$noteGroup = this.matchNOTES_CONTENT_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NOTES_CONTENT_1, noteGroup: $scope$noteGroup};
                }
                return $$res;
            });
    }
    public matchNOTES_CONTENT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES_CONTENT_2> {
        return this.run<NOTES_CONTENT_2>($$dpth,
            () => {
                let $scope$note: Nullable<NOTES_CONTENT_$1>;
                let $$res: Nullable<NOTES_CONTENT_2> = null;
                if (true
                    && ($scope$note = this.matchNOTES_CONTENT_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NOTES_CONTENT_2, note: $scope$note};
                }
                return $$res;
            });
    }
    public matchNOTES_CONTENT_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES_CONTENT_$0> {
        return this.matchNOTE_GROUP($$dpth + 1, $$cr);
    }
    public matchNOTES_CONTENT_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTES_CONTENT_$1> {
        return this.matchNOTE($$dpth + 1, $$cr);
    }
    public matchNOTE($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTE> {
        return this.run<NOTE>($$dpth,
            () => {
                let $scope$duration: Nullable<Nullable<NOTE_$0>>;
                let $scope$simpleNote: Nullable<SIMPLE_NOTE>;
                let $$res: Nullable<NOTE> = null;
                if (true
                    && (($scope$duration = this.matchNOTE_$0($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$simpleNote = this.matchSIMPLE_NOTE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NOTE, duration: $scope$duration, simpleNote: $scope$simpleNote};
                }
                return $$res;
            });
    }
    public matchNOTE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTE_$0> {
        return this.matchDURATION($$dpth + 1, $$cr);
    }
    public matchSIMPLE_NOTE($$dpth: number, $$cr?: ErrorTracker): Nullable<SIMPLE_NOTE> {
        return this.choice<SIMPLE_NOTE>([
            () => this.matchSIMPLE_NOTE_1($$dpth + 1, $$cr),
            () => this.matchSIMPLE_NOTE_2($$dpth + 1, $$cr),
        ]);
    }
    public matchSIMPLE_NOTE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SIMPLE_NOTE_1> {
        return this.run<SIMPLE_NOTE_1>($$dpth,
            () => {
                let $scope$silence: Nullable<SIMPLE_NOTE_$0>;
                let $$res: Nullable<SIMPLE_NOTE_1> = null;
                if (true
                    && ($scope$silence = this.matchSIMPLE_NOTE_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SIMPLE_NOTE_1, silence: $scope$silence};
                }
                return $$res;
            });
    }
    public matchSIMPLE_NOTE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SIMPLE_NOTE_2> {
        return this.run<SIMPLE_NOTE_2>($$dpth,
            () => {
                let $scope$note: Nullable<SIMPLE_NOTE_$1>;
                let $$res: Nullable<SIMPLE_NOTE_2> = null;
                if (true
                    && ($scope$note = this.matchSIMPLE_NOTE_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SIMPLE_NOTE_2, note: $scope$note};
                }
                return $$res;
            });
    }
    public matchSIMPLE_NOTE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SIMPLE_NOTE_$0> {
        return this.matchSILENCE_SIGN($$dpth + 1, $$cr);
    }
    public matchSIMPLE_NOTE_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SIMPLE_NOTE_$1> {
        return this.matchNOTE_VALUE($$dpth + 1, $$cr);
    }
    public matchNOTE_GROUP($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTE_GROUP> {
        return this.run<NOTE_GROUP>($$dpth,
            () => {
                let $scope$duration: Nullable<DURATION>;
                let $scope$notes: Nullable<NOTES>;
                let $$res: Nullable<NOTE_GROUP> = null;
                if (true
                    && ($scope$duration = this.matchDURATION($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchGROUP_START($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$notes = this.matchNOTES($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchGROUP_END($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.NOTE_GROUP, duration: $scope$duration, notes: $scope$notes};
                }
                return $$res;
            });
    }
    public matchDURATION($$dpth: number, $$cr?: ErrorTracker): Nullable<DURATION> {
        return this.run<DURATION>($$dpth,
            () => {
                let $scope$value: Nullable<DURATION_$0>;
                let $$res: Nullable<DURATION> = null;
                if (true
                    && ($scope$value = this.matchDURATION_$0($$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DURATION, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchDURATION_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DURATION_$0> {
        return this.matchDURATION_VALUE($$dpth + 1, $$cr);
    }
    public matchDURATION_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<DURATION_VALUE> {
        return this.choice<DURATION_VALUE>([
            () => this.matchDURATION_VALUE_1($$dpth + 1, $$cr),
            () => this.matchDURATION_VALUE_2($$dpth + 1, $$cr),
            () => this.matchDURATION_VALUE_3($$dpth + 1, $$cr),
        ]);
    }
    public matchDURATION_VALUE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<DURATION_VALUE_1> {
        return this.regexAccept(String.raw`(?:[0-9]+n\.?)`, "", $$dpth + 1, $$cr);
    }
    public matchDURATION_VALUE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<DURATION_VALUE_2> {
        return this.regexAccept(String.raw`(?:[0-9]+m)`, "", $$dpth + 1, $$cr);
    }
    public matchDURATION_VALUE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<DURATION_VALUE_3> {
        return this.regexAccept(String.raw`(?:[0-9]+t)`, "", $$dpth + 1, $$cr);
    }
    public matchNOTE_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<NOTE_VALUE> {
        return this.regexAccept(String.raw`(?:-?[0-9]+)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchBEGIN_OBJECT(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchBEGIN_OBJECT(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchBEGIN_OBJECT(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<BEGIN_OBJECT>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}